from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import os
import logging
import tempfile
import dropbox
from dropbox.exceptions import AuthError, ApiError
from datetime import datetime
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import time
import traceback
import shutil
import gc
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__, static_folder='static')
CORS(app)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø - –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø –ò FALLBACK
SPREADSHEET_ID = os.environ.get('GOOGLE_SHEETS_ID', '1uo3JONGwST9BZWKiLhqmn3UcGKx8k9oXqGBNvlkV3RY')
SHEET_NAME = '–ë–∞–Ω–∫ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤'

SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤
MAX_FILE_SIZE = 2 * 1024 * 1024 * 1024
ALLOWED_VIDEO_TYPES = {
    'video/mp4', 'video/avi', 'video/mov', 'video/quicktime', 
    'video/webm', 'video/mkv', 'video/wmv'
}

def create_google_services():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ Google API —Å FALLBACK –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –°–ù–ê–ß–ê–õ–ê –ü–†–û–ë–£–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–£–Æ –û–ö–†–£–ñ–ï–ù–ò–Ø
        credentials_json = os.environ.get('GOOGLE_CREDENTIALS_JSON')
        
        if credentials_json:
            logger.info("üìã –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDENTIALS_JSON –Ω–∞–π–¥–µ–Ω–∞, –ø–∞—Ä—Å—é JSON...")
            try:
                credentials_info = json.loads(credentials_json)
                creds = Credentials.from_service_account_info(credentials_info, scopes=SCOPES)
                sheets_service = build('sheets', 'v4', credentials=creds)
                logger.info("‚úÖ Google API –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
                return sheets_service
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        
        # FALLBACK –ù–ê –í–°–¢–†–û–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï
        logger.info("üîÑ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        logger.error("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CREDENTIALS_JSON")
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ create_google_services: {e}")
        logger.error(f"‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return None

def create_dropbox_client():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Dropbox —Å FALLBACK –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω"""
    try:
        # –°–ù–ê–ß–ê–õ–ê –ü–†–û–ë–£–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–£–Æ –û–ö–†–£–ñ–ï–ù–ò–Ø
        token = os.environ.get('DROPBOX_ACCESS_TOKEN')
        
        if not token:
            # FALLBACK –ù–ê –í–°–¢–†–û–ï–ù–ù–´–ô –¢–û–ö–ï–ù
            logger.info("üîÑ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DROPBOX_ACCESS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            logger.error("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DROPBOX_ACCESS_TOKEN")
            return None
        
        logger.info("üìã –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Dropbox...")
        dbx = dropbox.Dropbox(token)
        account_info = dbx.users_get_current_account()
        logger.info(f"‚úÖ Dropbox –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ê–∫–∫–∞—É–Ω—Ç: {account_info.email}")
        return dbx
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Dropbox: {e}")
        logger.error(f"‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return None

def create_dropbox_folder_and_get_link(dbx, folder_name):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –≤ Dropbox"""
    try:
        folder_path = f"/{folder_name}"
        logger.info(f"üìÇ –°–æ–∑–¥–∞—é –ø–∞–ø–∫—É: {folder_name}")
        
        try:
            dbx.files_create_folder_v2(folder_path)
            logger.info(f"‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {folder_name}")
        except ApiError as e:
            if e.error.is_path() and e.error.get_path().is_conflict():
                logger.info(f"üìÅ –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_name}")
            else:
                raise e
        
        try:
            shared_link = dbx.sharing_create_shared_link_with_settings(
                folder_path,
                settings=dropbox.sharing.SharedLinkSettings(
                    requested_visibility=dropbox.sharing.RequestedVisibility.public
                )
            )
            folder_url = shared_link.url
            logger.info(f"üîó –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–ø–∫—É: {folder_name}")
            return folder_url
        except ApiError as e:
            if e.error.is_shared_link_already_exists():
                links = dbx.sharing_list_shared_links(path=folder_path)
                if links.links:
                    folder_url = links.links[0].url
                    logger.info(f"üîó –ü–æ–ª—É—á–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Å—ã–ª–∫–∞: {folder_name}")
                    return folder_url
            folder_encoded = folder_name.replace('_', '%20')
            return f"https://www.dropbox.com/home/{folder_encoded}"
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–∞–ø–∫–æ–π: {e}")
        return "https://www.dropbox.com/home"

def upload_to_dropbox_simple(dbx, folder_name, file_path, filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Dropbox —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        dropbox_path = f"/{folder_name}/{filename}"
        file_size = os.path.getsize(file_path)
        logger.info(f"üì§ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª: {filename} ({format_file_size(file_size)})")
        
        start_time = time.time()
        
        with open(file_path, 'rb') as f:
            file_data = f.read()
        
        if len(file_data) <= 150 * 1024 * 1024:  # –î–æ 150MB
            logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è {filename}")
            dbx.files_upload(file_data, dropbox_path, mode=dropbox.files.WriteMode.overwrite)
            logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ—Å—Ç—ã–º –º–µ—Ç–æ–¥–æ–º: {filename}")
        else:
            logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É—é chunked –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ {filename}")
            chunk_size = 4 * 1024 * 1024  # 4MB
            upload_session_start_result = dbx.files_upload_session_start(file_data[:chunk_size])
            cursor = dropbox.files.UploadSessionCursor(
                session_id=upload_session_start_result.session_id,
                offset=chunk_size
            )
            
            while cursor.offset < len(file_data):
                if (cursor.offset + chunk_size) >= len(file_data):
                    commit = dropbox.files.CommitInfo(path=dropbox_path, mode=dropbox.files.WriteMode.overwrite)
                    dbx.files_upload_session_finish(
                        file_data[cursor.offset:],
                        cursor,
                        commit
                    )
                    break
                else:
                    dbx.files_upload_session_append_v2(
                        file_data[cursor.offset:cursor.offset + chunk_size],
                        cursor
                    )
                    cursor.offset += chunk_size
                    
                    progress = (cursor.offset / len(file_data)) * 100
                    logger.info(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {progress:.1f}%")
            
            logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω chunked –º–µ—Ç–æ–¥–æ–º: {filename}")
        
        upload_time = time.time() - start_time
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {upload_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        # –°–æ–∑–¥–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
        try:
            shared_link = dbx.sharing_create_shared_link_with_settings(dropbox_path)
            public_url = shared_link.url.replace('?dl=0', '?dl=1')
            logger.info(f"üîó –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª: {filename}")
        except ApiError as e:
            if e.error.is_shared_link_already_exists():
                links = dbx.sharing_list_shared_links(path=dropbox_path)
                if links.links:
                    public_url = links.links[0].url.replace('?dl=0', '?dl=1')
                else:
                    public_url = f"https://dropbox.com/s/unknown/{filename}"
            else:
                public_url = f"https://dropbox.com/s/unknown/{filename}"
        
        logger.info(f"üéâ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {filename}")
        return public_url, dropbox_path
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        logger.error(f"‚ùå –°—Ç–µ–∫: {traceback.format_exc()}")
        raise

def add_row_to_sheet(sheets_service, spreadsheet_id, sheet_name, data):
    """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ Google Sheets"""
    try:
        row = [
            data['artikul'],
            data['filename'],
            data['date'],
            data['description'],
            data['folder_link']
        ]
        body = {'values': [row]}
        
        logger.info(f"üìä –î–æ–±–∞–≤–ª—è—é —Å—Ç—Ä–æ–∫—É –≤ Google Sheets –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {data['artikul']}")
        sheets_service.spreadsheets().values().append(
            spreadsheetId=spreadsheet_id,
            range=f"{sheet_name}!A:E",
            valueInputOption='USER_ENTERED',
            body=body
        ).execute()
        
        logger.info(f"‚úÖ –°—Ç—Ä–æ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É: {data['artikul']}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
        raise

def format_file_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    if size_bytes == 0:
        return "0 B"
    size_names = ["B", "KB", "MB", "GB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024.0
        i += 1
    return f"{size_bytes:.1f} {size_names[i]}"

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        logger.info("üåê –ó–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
        dropbox_client = create_dropbox_client()
        sheets_service = create_google_services()
        
        if not dropbox_client:
            logger.error("‚ùå Dropbox –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return '<h1>‚ùå –û—à–∏–±–∫–∞ Dropbox</h1><p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω</p>'
        
        if not sheets_service:
            logger.error("‚ùå Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω") 
            return '<h1>‚ùå –û—à–∏–±–∫–∞ Google Sheets</h1><p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ credentials</p>'
        
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –æ—Ç–¥–∞—é index.html")
        return send_from_directory('.', 'index.html')
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return f'<h1>–û–®–ò–ë–ö–ê</h1><p>{str(e)}</p>'

@app.route('/upload', methods=['POST'])
def upload_videos():
    """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô ENDPOINT –ó–ê–ì–†–£–ó–ö–ò"""
    upload_start_time = time.time()
    logger.info("üö®üö®üö® –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –ù–ê –ó–ê–ì–†–£–ó–ö–£! üö®üö®üö®")
    logger.info("üïê –í–†–ï–ú–Ø –ù–ê–ß–ê–õ–ê –ó–ê–ì–†–£–ó–ö–ò: %s", datetime.now().strftime("%H:%M:%S"))
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
        dropbox_client = create_dropbox_client()
        sheets_service = create_google_services()
        
        if not dropbox_client:
            logger.error("‚ùå DROPBOX –ù–ï–î–û–°–¢–£–ü–ï–ù")
            return jsonify({'error': 'Dropbox –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}), 500
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        artikul = request.form.get('artikul')
        date = request.form.get('date')
        description = request.form.get('description')
        
        logger.info(f"üìã –î–ê–ù–ù–´–ï –§–û–†–ú–´:")
        logger.info(f"   –ê—Ä—Ç–∏–∫—É–ª: {artikul}")
        logger.info(f"   –î–∞—Ç–∞: {date}")
        logger.info(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        
        if not all([artikul, date, description]):
            logger.error("‚ùå –ù–ï –í–°–ï –ü–û–õ–Ø –ó–ê–ü–û–õ–ù–ï–ù–´")
            return jsonify({'error': '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã
        files = request.files.getlist('videos')
        logger.info(f"üìÅ –ü–û–õ–£–ß–ï–ù–û –§–ê–ô–õ–û–í: {len(files)}")
        
        if not files or all(file.filename == '' for file in files):
            logger.error("‚ùå –ù–ï–¢ –§–ê–ô–õ–û–í –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò")
            return jsonify({'error': '–ù–µ—Ç —Ñ–∞–π–ª–æ–≤'}), 400
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
        valid_files = []
        total_size = 0
        for file in files:
            if file.filename == '':
                continue
            
            file.seek(0, 2)
            file_size = file.tell()
            file.seek(0)
            total_size += file_size
            
            logger.info(f"üìÑ –§–ê–ô–õ: {file.filename} ({format_file_size(file_size)})")
            
            if file_size > MAX_FILE_SIZE:
                logger.error(f"‚ùå –§–ê–ô–õ –°–õ–ò–®–ö–û–ú –ë–û–õ–¨–®–û–ô: {file.filename}")
                return jsonify({'error': f'–§–∞–π–ª {file.filename} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π'}), 400
            
            valid_files.append(file)
        
        logger.info(f"üìä –û–ë–©–ò–ô –†–ê–ó–ú–ï–† –§–ê–ô–õ–û–í: {format_file_size(total_size)}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
        dropbox_folder = f"{artikul}_{date}"
        logger.info(f"üìÇ –°–û–ó–î–ê–Æ –ü–ê–ü–ö–£: {dropbox_folder}")
        
        folder_url = create_dropbox_folder_and_get_link(dropbox_client, dropbox_folder)
        logger.info(f"üîó –°–°–´–õ–ö–ê –ù–ê –ü–ê–ü–ö–£: {folder_url}")
        
        uploaded_files = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        with tempfile.TemporaryDirectory() as temp_dir:
            logger.info(f"üìÅ –í–†–ï–ú–ï–ù–ù–ê–Ø –î–ò–†–ï–ö–¢–û–†–ò–Ø: {temp_dir}")
            
            for i, file in enumerate(valid_files, 1):
                file_start_time = time.time()
                logger.info(f"üîÑ –û–ë–†–ê–ë–ê–¢–´–í–ê–Æ –§–ê–ô–õ {i}/{len(valid_files)}: {file.filename}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è
                file_extension = os.path.splitext(file.filename)[1].lower()
                numbered_filename = f"{i:02d}_{artikul}_{date}{file_extension}"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ
                temp_file_path = os.path.join(temp_dir, numbered_filename)
                file.save(temp_file_path)
                file_size = os.path.getsize(temp_file_path)
                
                logger.info(f"üíæ –§–ê–ô–õ –°–û–•–†–ê–ù–ï–ù: {numbered_filename} ({format_file_size(file_size)})")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Dropbox
                logger.info(f"üì§ –ó–ê–ì–†–£–ñ–ê–Æ –í DROPBOX: {numbered_filename}")
                dropbox_url, dropbox_path = upload_to_dropbox_simple(
                    dropbox_client, dropbox_folder, temp_file_path, numbered_filename
                )
                
                file_end_time = time.time()
                file_duration = file_end_time - file_start_time
                
                uploaded_files.append({
                    'filename': numbered_filename,
                    'original_name': file.filename,
                    'size': format_file_size(file_size),
                    'dropbox_url': dropbox_url,
                    'dropbox_path': dropbox_path,
                    'storage': 'Dropbox',
                    'upload_time': f"{file_duration:.1f}s"
                })
                
                logger.info(f"‚úÖ –§–ê–ô–õ {numbered_filename} –ó–ê–ì–†–£–ñ–ï–ù –ó–ê {file_duration:.1f} –°–ï–ö–£–ù–î!")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Sheets
        sheet_success = False
        if sheets_service:
            try:
                logger.info("üìä –î–û–ë–ê–í–õ–Ø–Æ –í GOOGLE SHEETS")
                
                if len(uploaded_files) == 1:
                    files_description = uploaded_files[0]['filename']
                else:
                    files_description = f"{len(uploaded_files)} —Ñ–∞–π–ª–æ–≤"
                
                sheet_data = {
                    'artikul': artikul,
                    'filename': files_description,
                    'date': date,
                    'description': description,
                    'folder_link': folder_url
                }
                
                add_row_to_sheet(sheets_service, SPREADSHEET_ID, SHEET_NAME, sheet_data)
                sheet_success = True
                logger.info("‚úÖ –ó–ê–ü–ò–°–¨ –î–û–ë–ê–í–õ–ï–ù–ê –í GOOGLE SHEETS")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–ï –£–î–ê–õ–û–°–¨ –î–û–ë–ê–í–ò–¢–¨ –í –¢–ê–ë–õ–ò–¶–£: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        upload_end_time = time.time()
        total_duration = upload_end_time - upload_start_time
        
        response_data = {
            'success': True,
            'message': '–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!',
            'artikul': artikul,
            'date': date,
            'description': description,
            'folder_link': folder_url,
            'dropbox_folder': dropbox_folder,
            'dropbox_success': True,
            'sheet_success': sheet_success,
            'sheet_link': f"https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}" if sheet_success else None,
            'uploaded_files': uploaded_files,
            'upload_time': datetime.now().isoformat(),
            'total_duration': f"{total_duration:.1f}s",
            'total_size': format_file_size(total_size)
        }
        
        logger.info("üèÅ –û–ë–©–ï–ï –í–†–ï–ú–Ø –ó–ê–ì–†–£–ó–ö–ò: %.1f —Å–µ–∫—É–Ω–¥ (%.1f –º–∏–Ω—É—Ç)", total_duration, total_duration/60)
        logger.info("üéâüéâüéâ –í–°–ï –û–ü–ï–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâüéâüéâ")
        logger.info(f"üìã –ó–ê–ì–†–£–ñ–ï–ù–û {len(uploaded_files)} –§–ê–ô–õ–û–í –î–õ–Ø –ê–†–¢–ò–ö–£–õ–ê {artikul}")
        
        return jsonify(response_data)
        
    except Exception as e:
        logger.error(f"üí•üí•üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        logger.error(f"üí• –°–¢–ï–ö: {traceback.format_exc()}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    logger.info("üíö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞")
    return jsonify({
        'status': 'OK',
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    app.config['MAX_CONTENT_LENGTH'] = MAX_FILE_SIZE
    
    logger.info("üöÄüöÄüöÄ –ó–ê–ü–£–°–ö VIDEOUPLOAD PRO üöÄüöÄüöÄ")
    logger.info(f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {format_file_size(MAX_FILE_SIZE)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    dropbox_client = create_dropbox_client()
    sheets_service = create_google_services()
    
    logger.info(f"üì¶ Dropbox: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if dropbox_client else '‚ùå –û—à–∏–±–∫–∞'}")
    logger.info(f"üìä Google Sheets: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if sheets_service else '‚ùå –û—à–∏–±–∫–∞'}")
    
    app.run(host='0.0.0.0', port=5000, debug=True)
